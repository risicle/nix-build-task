resources:
  - name: nix-build-task-git
    type: git
    source:
      uri: https://github.com/risicle/nix-build-task.git
      branch: ((working-branch))
  - name: nix-build-task-dockerhub
    type: registry-image
    source:
      tag: latest
      repository: ((working-docker-repo))
      username: ((dockerhub-username))
      password: ((dockerhub-password))

jobs:
  - name: update-pipeline
    serial: true
    plan:
    - get: nix-build-task-git
      trigger: true
    - set_pipeline: self
      file: nix-build-task-git/ci/build.yml
      vars:
        working-branch: ((working-branch))
        working-docker-repo: ((working-docker-repo))

  - name: bootstrap-image
    serial: true
    plan:
      - get: nix-build-task-git
        passed: [update-pipeline]
        trigger: true
      - task: stage-0-build
        output_mapping:
          output: stage-0-image
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: nixos/nix
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: output
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                nix-channel --add https://nixos.org/channels/nixos-20.09 nixpkgs
                nix-channel --update
                SKOPEO=$(nix-build '<nixpkgs>' -A skopeo)/bin/skopeo
                OCI_IMAGE_TOOL=$(nix-build '<nixpkgs>' -A oci-image-tool)/bin/oci-image-tool
                JQ=$(nix-build '<nixpkgs>' -A jq)/bin/jq

                nix-build nix-build-task-git -A image
                gzip -dc result > output/image.tar
                $SKOPEO inspect docker-archive:output/image.tar > image.json
                $JQ '.Digest' image.json > output/digest
                $JQ '{env: .Env, user: .User}' image.json > output/metadata.json
                $SKOPEO --insecure-policy copy docker-archive:output/image.tar oci:oci_dir:latest
                $OCI_IMAGE_TOOL unpack oci_dir output/rootfs --ref name=latest

      - task: stage-1-build
        image: stage-0-image
        output_mapping:
          output0: stage-1-image
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: output0
          params:
            NIXFILE: nix-build-task-git
            ATTR0: image
            OUTPUT0_PREPARE_IMAGE: 1
          run:
            path: /bin/build

      - put: nix-build-task-dockerhub
        params:
          image: stage-1-image/image.tar

  - name: test-build-images
    serial: true
    plan:
      - in_parallel:
        - get: nix-build-task-dockerhub
        - get: nix-build-task-git
          passed: [bootstrap-image]
      - task: build-multiple
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: hopefully-alpine-image
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            OUTPUT_PREPARE_IMAGE: unpack
            OUTPUT1_PREPARE_IMAGE: 1  # should be ignored
          run:
            path: /bin/build
      - task: check-alpine
        image: hopefully-alpine-image
        config:
          platform: linux
          inputs:
            - name: hopefully-alpine-image
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                stat hopefully-alpine-image/result
                stat hopefully-alpine-image/result-2
                stat hopefully-alpine-image/result-3
                stat hopefully-alpine-image/digest
                stat hopefully-alpine-image/image.tar
                cat /etc/alpine-release
      - task: build-separate
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: separate-skopeo-alone-image
              path: output
            - name: separate-cf-cli-image
              path: output1
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            ATTR: skopeo-alone
            ATTR1: cf-cli-shell
            ATTR2: alpine-fetched  # deliberately missing output for this
            OUTPUT0_PREPARE_IMAGE: 1
            OUTPUT1_PREPARE_IMAGE: unpack
          run:
            path: /bin/build
      - task: check-cf-cli-shell
        image: separate-cf-cli-image
        config:
          platform: linux
          inputs:
            - name: separate-skopeo-alone-image
          run:
            path: /bin/bash
            args:
              - -e
              - -c
              - |
                cf help
                if ! [[ -a separate-skopeo-alone-image/image.tar ]] ; then
                  echo "separate-skopeo-alone-image/image.tar missing"
                  exit 7
                fi
                if [[ -a separate-skopeo-alone-image/rootfs ]] ; then
                  echo "separate-skopeo-alone-image/rootfs shouldn't exist"
                  exit 8
                fi
                if [[ "$CF_USERNAME" != 'foo' ]] ; then
                  echo "CF_USERNAME should be 'foo', not '$CF_USERNAME'"
                  exit 9
                fi

  - name: test-build-other
    serial: true
    plan:
      - in_parallel:
        - get: nix-build-task-dockerhub
        - get: nix-build-task-git
          passed: [bootstrap-image]
      - task: build-bash-image
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: bash-image
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            ATTR: literally-just-bash-and-find
            OUTPUT_PREPARE_IMAGE: unpack
          run:
            path: /bin/build
      - task: build-dirs
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: linux-dirs
              path: output0
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR0: linux-dir
          run:
            path: /bin/build
      - task: check-dirs
        image: bash-image
        config:
          platform: linux
          inputs:
            - name: linux-dirs
          run:
            path: /bin/bash
            args:
              - -e
              - -c
              - |
                # check dirs have no links
                if find linux-dirs -type l ; then
                  echo "Output should have no symlinks"
                  exit 7
                fi
