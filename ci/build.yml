resources:
  - name: nix-build-task-git
    type: git
    source:
      uri: https://github.com/risicle/nix-build-task.git
      branch: ((working-branch))
  - name: nix-build-task-git-bump-sources-branch
    type: git
    source:
      uri: git@github.com:risicle/nix-build-task.git
      branch: ((bump-sources-branch))
      private_key: ((github-ssh-key))
  - name: nix-build-task-dockerhub
    type: registry-image
    source:
      tag: latest
      repository: ((working-docker-repo))
      username: ((dockerhub-username))
      password: ((dockerhub-password))
  - name: every-friday-night
    type: time
    source:
      location: Europe/London
      start: 23:00
      stop: 23:30
      days: [Friday]

jobs:
  - name: update-pipeline
    serial: true
    plan:
    - get: nix-build-task-git
      trigger: true
    - set_pipeline: self
      file: nix-build-task-git/ci/build.yml
      vars:
        working-branch: ((working-branch))
        working-docker-repo: ((working-docker-repo))
        bump-sources-branch: ((bump-sources-branch))

  - name: bootstrap-image
    serial: true
    plan:
      - get: nix-build-task-git
        passed: [update-pipeline]
        trigger: true
      - task: stage-0-build
        output_mapping:
          output: stage-0-image
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: nixos/nix
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: output
          params:
            CACHIX_SIGNING_KEY: ((cachix-signing-key))
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                CACHIX=$(nix-build '<nixpkgs>' -A cachix)/bin/cachix

                # using but not pushing to cache from stage-0
                $CACHIX use ((cachix-cache))

                nix-channel --add https://nixos.org/channels/nixos-20.09 nixpkgs
                nix-channel --update
                SKOPEO=$(nix-build '<nixpkgs>' -A skopeo)/bin/skopeo
                OCI_IMAGE_TOOL=$(nix-build '<nixpkgs>' -A oci-image-tool)/bin/oci-image-tool
                JQ=$(nix-build '<nixpkgs>' -A jq)/bin/jq

                nix-build nix-build-task-git -A image
                gzip -dc result > output/image.tar
                $SKOPEO inspect docker-archive:output/image.tar > image.json
                $JQ '.Digest' image.json > output/digest
                $JQ '{env: .Env, user: .User}' image.json > output/metadata.json
                $SKOPEO --insecure-policy copy docker-archive:output/image.tar oci:oci_dir:latest
                $OCI_IMAGE_TOOL unpack oci_dir output/rootfs --ref name=latest

      - task: stage-1-build
        image: stage-0-image
        output_mapping:
          output0: stage-1-image
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: output0
          params:
            NIXFILE: nix-build-task-git
            ATTR0: image
            OUTPUT0_PREPARE_IMAGE: 1
            CACHIX_CACHE: ((cachix-cache))
            CACHIX_SIGNING_KEY: ((cachix-signing-key))
          run:
            path: /bin/build

      - put: nix-build-task-dockerhub
        params:
          image: stage-1-image/image.tar

  - name: test-build-images
    serial: true
    plan:
      - in_parallel:
        - get: nix-build-task-dockerhub
        - get: nix-build-task-git
          passed: [bootstrap-image]
      - task: build-multiple
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: hopefully-alpine-image
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            OUTPUT_PREPARE_IMAGE: unpack
            OUTPUT1_PREPARE_IMAGE: 1  # should be ignored
          run:
            path: /bin/build
      - task: check-alpine
        image: hopefully-alpine-image
        config:
          platform: linux
          inputs:
            - name: hopefully-alpine-image
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                stat hopefully-alpine-image/result
                stat hopefully-alpine-image/result-2
                stat hopefully-alpine-image/result-3
                stat hopefully-alpine-image/digest
                stat hopefully-alpine-image/image.tar
                cat /etc/alpine-release
      - task: build-separate
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: separate-skopeo-alone-image
              path: output
            - name: separate-cf-cli-image
              path: output1
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            ATTR: skopeo-alone
            ATTR1: cf-cli-shell
            ATTR2: alpine-fetched  # deliberately missing output for this
            OUTPUT0_PREPARE_IMAGE: 1
            OUTPUT1_PREPARE_IMAGE: unpack
          run:
            path: /bin/build
      - task: check-cf-cli-shell
        image: separate-cf-cli-image
        config:
          platform: linux
          inputs:
            - name: separate-skopeo-alone-image
          run:
            path: /bin/bash
            args:
              - -e
              - -c
              - |
                cf help
                if ! [[ -a separate-skopeo-alone-image/image.tar ]] ; then
                  echo "separate-skopeo-alone-image/image.tar missing"
                  exit 7
                fi
                if [[ -a separate-skopeo-alone-image/rootfs ]] ; then
                  echo "separate-skopeo-alone-image/rootfs shouldn't exist"
                  exit 8
                fi
                if [[ "$CF_USERNAME" != 'foo' ]] ; then
                  echo "CF_USERNAME should be 'foo', not '$CF_USERNAME'"
                  exit 9
                fi

  - name: test-build-other
    serial: true
    plan:
      - in_parallel:
        - get: nix-build-task-dockerhub
        - get: nix-build-task-git
          passed: [bootstrap-image]
      - task: build-busybox-image
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: busybox-image
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            ATTR: literally-just-busybox
            OUTPUT_PREPARE_IMAGE: unpack
          run:
            path: /bin/build
      - task: build-dirs
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: linux-dirs
              path: output0
            - name: multi-out-baz
              path: output1
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR0: linux-dir
            ATTR1: multiOut.baz
          run:
            path: /bin/build
      - task: check-dirs
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: linux-dirs
            - name: multi-out-baz
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                # check dirs have no links
                find linux-dirs -type l > found_symlinks
                if [ -n "$(cat found_symlinks)" ] ; then
                  echo "Output should have no symlinks, found:"
                  cat found_symlinks
                  exit 7
                fi

                stat linux-dirs/result/README.md
                stat linux-dirs/result/linux_1_0.tar.gz
                stat multi-out-baz/result
      - try:
          task: fail-to-unpack-non-image
          image: nix-build-task-dockerhub
          config:
            platform: linux
            inputs:
              - name: nix-build-task-git
            outputs:
              - name: linux-1-0
                path: output0
            params:
              NIXFILE: nix-build-task-git/tests/other.nix
              ATTR0: linux_1_0
              OUTPUT_PREPARE_IMAGE: unpack
            run:
              path: /bin/build
          on_failure:
            task: record-unpack-failure
            image: busybox-image
            config:
              platform: linux
              outputs:
                - name: linux-1-0
              run:
                path: /bin/ash
                args:
                  - -e
                  - -c
                  - |
                    touch linux-1-0/failure-recorded
      - task: check-unpack-failure
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: linux-1-0
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                if ! [ -e linux-1-0/failure-recorded ] ; then
                  echo "Expected linux-1-0/failure-recorded to have been created by record-unpack-failure"
                  exit 7
                fi
      - task: build-with-args
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: args-output
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR0: linux-dir
            BUILD_ARGSTR_readmeExt: .txt
            BUILD_ARG_includeTarball: 1 == 2
          run:
            path: /bin/build
      - task: check-args-effect
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: args-output
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                if [ -e args-output/result/linux_1_0.tar.gz ] ; then
                  echo "Output shouldn't include tarball"
                  exit 7
                fi

                stat args-output/result/README.txt
      - task: build-non-deterministic
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR: deliberatelyNonDeterministic
          run:
            path: /bin/build
      - try:
          task: build-non-deterministic-enforce-option
          image: nix-build-task-dockerhub
          config:
            platform: linux
            inputs:
              - name: nix-build-task-git
            outputs:
              - name: non-deterministic-output
                path: output
            params:
              NIXFILE: nix-build-task-git/tests/other.nix
              ATTR: deliberatelyNonDeterministic
              NIX_OPTION_enforce-determinism: true
              NIX_OPTION_repeat: 2
            run:
              path: /bin/build
          on_failure:
            task: record-determinism-failure
            image: busybox-image
            config:
              platform: linux
              outputs:
                - name: non-deterministic-output
              run:
                path: /bin/ash
                args:
                  - -e
                  - -c
                  - |
                    touch non-deterministic-output/failure-recorded
      - task: check-determinism-failure
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: non-deterministic-output
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                if ! [ -e non-deterministic-output/failure-recorded ] ; then
                  echo "Expected non-deterministic-output/failure-recorded to have been created by record-determinism-failure"
                  exit 7
                fi

  - name: test-eval-outpaths
    serial: true
    plan:
      - in_parallel:
        - get: nix-build-task-dockerhub
        - get: nix-build-task-git
          passed: [bootstrap-image]
      - task: eval-busybox-image
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: busybox-outpath
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            ATTR: literally-just-busybox
          run:
            path: /bin/build
            args:
              - eval-outpaths
      - task: build-busybox-image
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: busybox-image
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            ATTR: literally-just-busybox
            OUTPUT_PREPARE_IMAGE: unpack
          run:
            path: /bin/build
      - task: compare-outpaths
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: busybox-image
            - name: busybox-outpath
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                diff -u busybox-image/result.outpath busybox-outpath/result.outpath
                echo "No difference detected"
      - task: eval-multi-out
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: multi-out-outpath
              path: output
            - name: multi-out-baz-outpath
              path: output1
            - name: multi-out-foo-outpath
              path: output2
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR0: multiOut
            ATTR1: multiOut.baz
            ATTR2: multiOut.foo
            OUTPUT2_PREPARE_IMAGE: unpack  # should have no effect
          run:
            path: /bin/build
            args:
              - eval-outpaths
      - task: check-multi-out
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: multi-out-outpath
            - name: multi-out-baz-outpath
            - name: multi-out-foo-outpath
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                egrep -e '^[^-]+-multi-out-foo$' multi-out-outpath/result.outpath
                egrep -e '^[^-]+-multi-out-foo-baz$' multi-out-baz-outpath/result.outpath
                egrep -e '^[^-]+-multi-out-foo-foo$' multi-out-foo-outpath/result.outpath
      - task: eval-no-args
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: linux-dir-no-args
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR0: linux-dir
          run:
            path: /bin/build
            args:
              - eval-outpaths
      - task: eval-args-buz
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: linux-dir-args-buz
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR0: linux-dir
            BUILD_ARGSTR_readmeExt: buz
          run:
            path: /bin/build
            args:
              - eval-outpaths
      - task: check-args-results
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: linux-dir-no-args
            - name: linux-dir-args-buz
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                if diff -u linux-dir-no-args/result.outpath linux-dir-args-buz/result.outpath ; then
                  echo "Expected outputs linux-dir-no-args and linux-dir-args-buz to be different"
                  exit 7
                fi

  - name: test-cachix
    serial: true
    plan:
      - in_parallel:
        - get: nix-build-task-dockerhub
        - get: nix-build-task-git
          passed: [bootstrap-image]
      - task: build-busybox-image
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: busybox-image
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/images.nix
            ATTR: busybox-with-curl
            OUTPUT_PREPARE_IMAGE: unpack
            CACHIX_CACHE: ((cachix-cache))
            CACHIX_SIGNING_KEY: ((cachix-signing-key))
          run:
            path: /bin/build
      - task: generate-run-random
        image: busybox-image
        config:
          platform: linux
          outputs:
            - name: run-random-output
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                hexdump -e '/1 "%02x"' -n 8 /dev/random > run-random-output/value
      - load_var: run-random
        file: run-random-output/value
        format: trim
        reveal: true
      - task: build-linux-dir-nopush-emptycache
        image: nix-build-task-dockerhub
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: linux-dir-nopush-emptycache
              path: output
          params:
            NIXFILE: nix-build-task-git/tests/other.nix
            ATTR: linux-dir
            BUILD_ARGSTR_readmeExt: .((run-random)).md
            CACHIX_CACHE: ((cachix-cache))
          run:
            path: /bin/build
      - task: check-cache
        image: busybox-image
        config:
          platform: linux
          inputs:
            - name: linux-dir-outpath
          run:
            path: /bin/ash
            args:
              - -e
              - -c
              - |
                curl

  - name: bump-sources
    serial: true
    plan:
      - get: every-friday-night
        trigger: true
      - get: nix-build-task-git
        passed: [update-pipeline]
        trigger: false
      - task: build-bump-sources-image
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: risicle/nix-build-task
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: bump-sources-image
              path: output
          params:
            NIXFILE: nix-build-task-git/
            ATTR: bumpSourcesImage
            OUTPUT_PREPARE_IMAGE: unpack
          run:
            path: /bin/build
      - task: clone-and-bump
        image: bump-sources-image
        config:
          platform: linux
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: nix-build-task-git-bumped
          run:
            path: /bin/bash
            args:
              - -e
              - -c
              - |
                git clone nix-build-task-git nix-build-task-git-bumped

                pushd nix-build-task-git-bumped
                bump-sources 2>&1 | tee .bump-sources-output
                popd
      - task: eval-orig-outpaths
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: risicle/nix-build-task
          inputs:
            - name: nix-build-task-git
          outputs:
            - name: orig-outpaths
              path: output
          params:
            NIXFILE: nix-build-task-git/
            ATTR: image
          run:
            path: /bin/build
            args:
              - eval-outpaths
      - task: eval-bumped-outpaths
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: risicle/nix-build-task
          inputs:
            - name: nix-build-task-git-bumped
          outputs:
            - name: bumped-outpaths
              path: output
          params:
            NIXFILE: nix-build-task-git-bumped/
            ATTR: image
          run:
            path: /bin/build
            args:
              - eval-outpaths
      - try:
          task: compare-and-commit
          image: bump-sources-image
          config:
            platform: linux
            inputs:
              - name: nix-build-task-git
              - name: nix-build-task-git-bumped
              - name: orig-outpaths
              - name: bumped-outpaths
            outputs:
              - name: nix-build-task-git-bumped
            run:
              path: /bin/bash
              args:
                - -e
                - -c
                - |
                  if diff -ru orig-outpaths bumped-outpaths ; then
                    echo "No difference detected"
                    exit 7
                  fi

                  echo "Difference detected"
                  pushd nix-build-task-git-bumped

                  echo -n $'bump sources\n\noutput from bump-sources:\n\n' >> .message
                  cat .bump-sources-output >> .message

                  git checkout -b bump-sources

                  git config user.email 'bump.sources@humanleg.org.uk'
                  git config user.name 'bump-sources'
                  git commit --all --file=.message
                  popd
          on_success:
            put: nix-build-task-git-bump-sources-branch
            params:
              repository: nix-build-task-git-bumped
              force: true
